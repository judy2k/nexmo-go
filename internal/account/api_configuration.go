/*
 * Account API
 *
 * Enables users to manage their Vonage API Account by programmable means. More information is available here: <https://developer.nexmo.com/account/overview>.
 *
 * API version: 1.0.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package account

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// ConfigurationApiService ConfigurationApi service
type ConfigurationApiService service

// ChangeAccountSettingsOpts Optional parameters for the method 'ChangeAccountSettings'
type ChangeAccountSettingsOpts struct {
    MoCallBackUrl optional.String
    DrCallBackUrl optional.String
}

/*
ChangeAccountSettings Change Account Settings
Update the default callback URLs (where the webhooks are sent to) associated with your account:   * Callback URL for incoming SMS messages   * Callback URL for delivery receipts  Note that the URLs you provide must be valid and active. Vonage will check that they return a 200 OK response before the setting is saved.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param apiKey Your Vonage API key. You can find this in the [dashboard](https://dashboard.nexmo.com)
 * @param apiSecret Your Vonage API secret. You can find this in the [dashboard](https://dashboard.nexmo.com)
 * @param optional nil or *ChangeAccountSettingsOpts - Optional Parameters:
 * @param "MoCallBackUrl" (optional.String) -  The URL where Vonage will send a webhook when an SMS is received to a Vonage number that does not have SMS handling configured. Send an empty string to unset this value.
 * @param "DrCallBackUrl" (optional.String) -  The URL where Vonage will send a webhook when an delivery receipt is received without a specific callback URL configured. Send an empty string to unset this value.
@return AccountSettings
*/
func (a *ConfigurationApiService) ChangeAccountSettings(ctx _context.Context, apiKey string, apiSecret string, localVarOptionals *ChangeAccountSettingsOpts) (AccountSettings, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AccountSettings
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/account/settings"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("api_key", parameterToString(apiKey, ""))
	localVarQueryParams.Add("api_secret", parameterToString(apiSecret, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.MoCallBackUrl.IsSet() {
		localVarFormParams.Add("moCallBackUrl", parameterToString(localVarOptionals.MoCallBackUrl.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DrCallBackUrl.IsSet() {
		localVarFormParams.Add("drCallBackUrl", parameterToString(localVarOptionals.DrCallBackUrl.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
